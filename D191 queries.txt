-- Steven Bennett
-- ID 003761827
-- D191 - Advanced Data Management 
-- Performance Assessment



--(SECTION B)--------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE FUNCTION Concat_Names(first_name varchar(45), last_name varchar(45))
	RETURNS VARCHAR(90)
	LANGUAGE plpgsql
AS
$$
DECLARE full_name VARCHAR(90);
BEGIN
	SELECT first_name || ' ' || last_name INTO full_name;
	RETURN full_name;
END;
$$







--(SECTION C)--------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------
-- CREATE SUMMARIZED TABLE
----------------------------------------------------------------------------------------------------------------------------


DROP TABLE IF EXISTS Lowest_10_Summary;

CREATE TABLE Lowest_10_Summary(
full_name varchar(90),
email varchar(50),
num_rentals integer);





-- INSERT DATA INTO SUMMARIZED TABLE


INSERT INTO Lowest_10_Summary
SELECT CONCAT (customer.first_name, ' ', customer.last_name) AS full_name, 
	customer.email, 
	COUNT(rental.customer_id)  
FROM customer
LEFT JOIN rental ON customer.customer_id = rental.customer_id
GROUP BY customer.customer_id
ORDER BY COUNT(*);




-- VIEW SUMMARIZED TABLE

SELECT * FROM Lowest_10_Summary
LIMIT (SELECT COUNT(*) * 0.10 FROM Lowest_10_Summary);





--(SECTION C)----------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------
-- CREATE DETAILED TABLE
----------------------------------------------------------------------------------------------------------------------------


DROP TABLE IF EXISTS Lowest_10_Detailed;

CREATE TABLE Lowest_10_Detailed(
customer_id integer,
store_id smallint,
full_name varchar(90),
email varchar(50),
num_rentals integer);



--(SECTION D)---------------------------------------------------------------------------------------------------------------

--  INSERT INTO DETAILED TABLE 

INSERT INTO Lowest_10_Detailed
SELECT customer.customer_id, 
	customer.store_id, 
	Concat_names(customer.first_name, customer.last_name) AS full_name, --   FIX ME!!!!!!!!!!!!!!!
	email, 
	COUNT(rental.customer_id)
FROM customer
LEFT JOIN rental ON customer.customer_id = rental.customer_id
GROUP BY customer.customer_id
ORDER BY COUNT(*);




-- VIEW DETAILED TABLE

SELECT * FROM Lowest_10_Detailed
LIMIT (SELECT COUNT(*) * 0.10 FROM Lowest_10_Detailed);




----------------------------------------------------------------------------------------------------------------------------
-- CREATE A TRIGGER ON THE DETAILED TABLE THAT WILL UPDATE THE SUMMARY TABLE AS DATA IS ADDED TO THE DETAILED TABLE
----------------------------------------------------------------------------------------------------------------------------


DROP FUNCTION IF EXISTS sum_table_update() CASCADE;      

CREATE OR REPLACE FUNCTION sum_table_update()
	RETURNS Trigger
	AS $$
	BEGIN
		INSERT INTO Lowest_10_Summary
		VALUES(
		New.full_name,
		New.email,
		New.num_rentals);
		RETURN New;
	END;
	$$
	Language PLPGSQL;


--(SECTION E)------------------------------------------------------------------------------------------------------------

--  INSERT DATA INTO Lowest_10_Detailed
--  CREATE Trigger

DROP TRIGGER IF EXISTS Update_Summarized on Lowest_10_Detailed;
CREATE TRIGGER Update_Summarized
AFTER INSERT ON Lowest_10_Detailed
FOR EACH ROW
EXECUTE PROCEDURE sum_table_update();




---------  >>>>   TEST TRIGGER AND FUNCTION   <<<<  ----------


INSERT INTO Lowest_10_Detailed
Values(
999,
99,
'Mike Honcho',
'mikehoncho@usa.org',
1);

-- VIEW SUMMARIZED TABLE

SELECT * FROM Lowest_10_Summary
ORDER BY num_rentals
LIMIT (SELECT COUNT(*) * 0.10 FROM Lowest_10_Summary);





--(SECTION F)--------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------
-- PROVIDE AN ORIGINAL STORE PROCEDURE IN A TEXT FORMAT THAT CAN BE USED TO REFRESH THE DATA IN BOTH THE DETAILED TABLE AND 
-- SUMMARY TABLE. THE PROCEDURE SHOULD CLEAR THE CONTENTS OF THE DETAILED TABLE AND SUMMARY TABLE AND PERFORM THE RAW DATA 
-- EXTRACTION FROM PART D. 
----------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE refresh()
LANGUAGE SQL
AS $$
DELETE FROM Lowest_10_Detailed;
DELETE FROM Lowest_10_Summary;

INSERT INTO Lowest_10_Detailed
SELECT customer.customer_id, 
	customer.store_id, 
	CONCAT (customer.first_name, ' ', customer.last_name) AS full_name,
	customer.email, 
	COUNT(rental.customer_id)
FROM customer
LEFT JOIN rental ON customer.customer_id = rental.customer_id
GROUP BY customer.customer_id
ORDER BY COUNT(*)
$$;

CALL refresh();

SELECT * FROM Lowest_10_Summary








